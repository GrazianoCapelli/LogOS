//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.h"


// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

static bool bBitmapLoaded = false;


MainFrameBaseClass::MainFrameBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer1);
    
    m_mainPanel = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizer1->Add(m_mainPanel, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer27 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer27->SetFlexibleDirection( wxBOTH );
    flexGridSizer27->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer27->AddGrowableCol(0);
    flexGridSizer27->AddGrowableRow(0);
    m_mainPanel->SetSizer(flexGridSizer27);
    
    m_listCtrlPazienti = new wxListCtrl(m_mainPanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainPanel, wxSize(-1,-1)), wxLC_SINGLE_SEL|wxLC_REPORT);
    
    flexGridSizer27->Add(m_listCtrlPazienti, 0, wxALL|wxEXPAND|wxALIGN_TOP, WXC_FROM_DIP(5));
    m_listCtrlPazienti->SetMinSize(wxSize(350,150));
    
    m_staticLineBottom = new wxStaticLine(m_mainPanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainPanel, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer27->Add(m_staticLineBottom, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_menuBar = new wxMenuBar(0);
    this->SetMenuBar(m_menuBar);
    
    m_Paziente = new wxMenu();
    m_menuBar->Append(m_Paziente, _("Paziente"));
    
    m_menuItemNuovo = new wxMenuItem(m_Paziente, wxID_NEW, _("Nuovo\tCtrl-N"), _("Crea un nuovo paziente"), wxITEM_NORMAL);
    m_Paziente->Append(m_menuItemNuovo);
    
    m_menuItemApri = new wxMenuItem(m_Paziente, wxID_OPEN, _("Apri\tCtrl-A"), _("Apre la cartella del paziente selezionato"), wxITEM_NORMAL);
    m_Paziente->Append(m_menuItemApri);
    
    m_menuItemElimina = new wxMenuItem(m_Paziente, wxID_DELETE, _("Elimina"), _("Elimina il paziente selezionato"), wxITEM_NORMAL);
    m_Paziente->Append(m_menuItemElimina);
    
    m_Paziente->AppendSeparator();
    
    m_menuItemEsci = new wxMenuItem(m_Paziente, wxID_EXIT, _("Esci\tAlt-F4"), _("Esce dal programma"), wxITEM_NORMAL);
    m_Paziente->Append(m_menuItemEsci);
    
    m_Help = new wxMenu();
    m_menuBar->Append(m_Help, _("Help"));
    
    m_menuItemInformazioni = new wxMenuItem(m_Help, wxID_ABOUT, _("Informazioni..."), _("Informazioni sul programma"), wxITEM_NORMAL);
    m_Help->Append(m_menuItemInformazioni);
    
    m_mainToolbar = this->CreateToolBar(wxTB_TEXT|wxTB_FLAT, wxID_ANY);
    m_mainToolbar->SetToolBitmapSize(wxSize(16,16));
    
    m_mainToolbar->AddTool(wxID_NEW, _("Nuovo"), wxArtProvider::GetBitmap(wxART_NEW, wxART_TOOLBAR, wxDefaultSize), wxNullBitmap, wxITEM_NORMAL, wxT(""), _("Aggiunge un nuovo paziente"), NULL);
    
    m_mainToolbar->AddTool(wxID_OPEN, _("Apri"), wxArtProvider::GetBitmap(wxART_FILE_OPEN, wxART_TOOLBAR, wxDefaultSize), wxNullBitmap, wxITEM_NORMAL, wxT(""), _("Apre la cartella del paziente selezionato"), NULL);
    
    m_mainToolbar->AddTool(wxID_DELETE, _("Elimina"), wxArtProvider::GetBitmap(wxART_DELETE, wxART_TOOLBAR, wxDefaultSize), wxNullBitmap, wxITEM_NORMAL, wxT(""), _("Elimina il paziente selezionato"), NULL);
    m_mainToolbar->Realize();
    
    m_statusBar = new wxStatusBar(this, wxID_ANY, wxSTB_DEFAULT_STYLE|wxSTB_SIZEGRIP);
    m_statusBar->SetFieldsCount(1);
    this->SetStatusBar(m_statusBar);
    
    SetName(wxT("MainFrameBaseClass"));
    SetSize(400,400);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_listCtrlPazienti->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(MainFrameBaseClass::PazienteSelezionato), NULL, this);
    m_listCtrlPazienti->Connect(wxEVT_COMMAND_LIST_ITEM_DESELECTED, wxListEventHandler(MainFrameBaseClass::PazienteDeselezionato), NULL, this);
    m_listCtrlPazienti->Connect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(MainFrameBaseClass::OnListCtrlRichiestaApertura), NULL, this);
    this->Connect(m_menuItemNuovo->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::NuovoPaziente), NULL, this);
    this->Connect(m_menuItemApri->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::ApriPaziente), NULL, this);
    this->Connect(m_menuItemElimina->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::EliminaPaziente), NULL, this);
    this->Connect(m_menuItemEsci->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Connect(m_menuItemInformazioni->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    this->Connect(wxID_NEW, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MainFrameBaseClass::NuovoPaziente), NULL, this);
    this->Connect(wxID_OPEN, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MainFrameBaseClass::ApriPaziente), NULL, this);
    this->Connect(wxID_DELETE, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MainFrameBaseClass::EliminaPaziente), NULL, this);
    
}

MainFrameBaseClass::~MainFrameBaseClass()
{
    m_listCtrlPazienti->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(MainFrameBaseClass::PazienteSelezionato), NULL, this);
    m_listCtrlPazienti->Disconnect(wxEVT_COMMAND_LIST_ITEM_DESELECTED, wxListEventHandler(MainFrameBaseClass::PazienteDeselezionato), NULL, this);
    m_listCtrlPazienti->Disconnect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(MainFrameBaseClass::OnListCtrlRichiestaApertura), NULL, this);
    this->Disconnect(m_menuItemNuovo->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::NuovoPaziente), NULL, this);
    this->Disconnect(m_menuItemApri->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::ApriPaziente), NULL, this);
    this->Disconnect(m_menuItemElimina->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::EliminaPaziente), NULL, this);
    this->Disconnect(m_menuItemEsci->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Disconnect(m_menuItemInformazioni->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    this->Disconnect(wxID_NEW, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MainFrameBaseClass::NuovoPaziente), NULL, this);
    this->Disconnect(wxID_OPEN, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MainFrameBaseClass::ApriPaziente), NULL, this);
    this->Disconnect(wxID_DELETE, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MainFrameBaseClass::EliminaPaziente), NULL, this);
    
}

DialogNuovoPaziente::DialogNuovoPaziente(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer38 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer38->SetFlexibleDirection( wxBOTH );
    flexGridSizer38->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer38->AddGrowableCol(0);
    flexGridSizer38->AddGrowableRow(0);
    this->SetSizer(flexGridSizer38);
    
    wxFlexGridSizer* flexGridSizer48 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer48->SetFlexibleDirection( wxBOTH );
    flexGridSizer48->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer48->AddGrowableCol(1);
    
    flexGridSizer38->Add(flexGridSizer48, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextNome = new wxStaticText(this, wxID_ANY, _("Nome"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer48->Add(m_staticTextNome, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlNome = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlNome->SetHint(wxT(""));
    #endif
    
    flexGridSizer48->Add(m_textCtrlNome, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    m_textCtrlNome->SetMinSize(wxSize(150,-1));
    
    m_staticTextCognome = new wxStaticText(this, wxID_ANY, _("Cognome"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer48->Add(m_staticTextCognome, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlCognome = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlCognome->SetHint(wxT(""));
    #endif
    
    flexGridSizer48->Add(m_textCtrlCognome, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    m_textCtrlCognome->SetMinSize(wxSize(150,-1));
    
    m_staticTextNatoIl = new wxStaticText(this, wxID_ANY, _("Nato il"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer48->Add(m_staticTextNatoIl, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_calendarNatoIl = new wxCalendarCtrl(this, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxCAL_SHOW_HOLIDAYS);
    
    flexGridSizer48->Add(m_calendarNatoIl, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticLine50 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer38->Add(m_staticLine50, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizerBottoni = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizerBottoni->SetFlexibleDirection( wxBOTH );
    flexGridSizerBottoni->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizerBottoni->AddGrowableCol(0);
    
    flexGridSizer38->Add(flexGridSizerBottoni, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextEsistente = new wxStaticText(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_staticTextEsistente->SetForegroundColour(wxColour(wxT("rgb(255,0,0)")));
    
    flexGridSizerBottoni->Add(m_staticTextEsistente, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_buttonAnnulla = new wxButton(this, wxID_CANCEL, _("Annulla"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_buttonAnnulla->SetToolTip(_("Annulla la creazione"));
    
    flexGridSizerBottoni->Add(m_buttonAnnulla, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonCrea = new wxButton(this, wxID_OK, _("Crea"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_buttonCrea->SetDefault();
    m_buttonCrea->SetToolTip(_("Crea il paziente"));
    m_buttonCrea->Enable(false);
    
    flexGridSizerBottoni->Add(m_buttonCrea, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("DialogNuovoPaziente"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_textCtrlNome->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(DialogNuovoPaziente::PossoCrearlo), NULL, this);
    m_textCtrlCognome->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(DialogNuovoPaziente::PossoCrearlo), NULL, this);
    m_calendarNatoIl->Connect(wxEVT_CALENDAR_SEL_CHANGED, wxCalendarEventHandler(DialogNuovoPaziente::PossoCrearlo), NULL, this);
    m_buttonCrea->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(DialogNuovoPaziente::CreaPaziente), NULL, this);
    
}

DialogNuovoPaziente::~DialogNuovoPaziente()
{
    m_textCtrlNome->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(DialogNuovoPaziente::PossoCrearlo), NULL, this);
    m_textCtrlCognome->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(DialogNuovoPaziente::PossoCrearlo), NULL, this);
    m_calendarNatoIl->Disconnect(wxEVT_CALENDAR_SEL_CHANGED, wxCalendarEventHandler(DialogNuovoPaziente::PossoCrearlo), NULL, this);
    m_buttonCrea->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(DialogNuovoPaziente::CreaPaziente), NULL, this);
    
}

FramePaziente::FramePaziente(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    m_menuBarPaziente = new wxMenuBar(0);
    this->SetMenuBar(m_menuBarPaziente);
    
    m_menuPaziente = new wxMenu();
    m_menuBarPaziente->Append(m_menuPaziente, _("Paziente"));
    
    m_menuItemChiudi = new wxMenuItem(m_menuPaziente, wxID_HOME, _("Chiudi\tCtrl-F4"), _("Chiudi la cartella paziente e ritorna all'archivio"), wxITEM_NORMAL);
    m_menuPaziente->Append(m_menuItemChiudi);
    
    m_menuEsercizio = new wxMenu();
    m_menuBarPaziente->Append(m_menuEsercizio, _("Esercizio"));
    
    m_menuItemNuovoEsercizio = new wxMenuItem(m_menuEsercizio, wxID_MORE, _("Nuovo"), _("Inizia un nuovo esercizio"), wxITEM_NORMAL);
    m_menuEsercizio->Append(m_menuItemNuovoEsercizio);
    
    m_menuItemNuovoComePrecedente = new wxMenuItem(m_menuEsercizio, wxID_ANY, _("Nuovo come l'ultimo svolto"), _("Inizia un nuovo esercizio con le impostazioni dell'ultimo esercizio svolto"), wxITEM_NORMAL);
    m_menuEsercizio->Append(m_menuItemNuovoComePrecedente);
    
    m_menuItemNuovoComeSelezione = new wxMenuItem(m_menuEsercizio, wxID_ANY, _("Nuovo come da selezione"), wxT(""), wxITEM_NORMAL);
    m_menuEsercizio->Append(m_menuItemNuovoComeSelezione);
    
    m_statusBarPaziente = new wxStatusBar(this, wxID_ANY, wxSTB_DEFAULT_STYLE|wxSTB_SIZEGRIP);
    m_statusBarPaziente->SetFieldsCount(1);
    this->SetStatusBar(m_statusBarPaziente);
    
    wxFlexGridSizer* flexGridSizer116 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer116->SetFlexibleDirection( wxBOTH );
    flexGridSizer116->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer116->AddGrowableCol(0);
    flexGridSizer116->AddGrowableRow(0);
    this->SetSizer(flexGridSizer116);
    
    m_panel270 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    flexGridSizer116->Add(m_panel270, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer118 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer118->SetFlexibleDirection( wxBOTH );
    flexGridSizer118->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer118->AddGrowableCol(1);
    flexGridSizer118->AddGrowableRow(0);
    m_panel270->SetSizer(flexGridSizer118);
    
    wxStaticBoxSizer* staticBoxSizer122 = new wxStaticBoxSizer( new wxStaticBox(m_panel270, wxID_ANY, _("Dati")), wxVERTICAL);
    
    flexGridSizer118->Add(staticBoxSizer122, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer124 = new wxFlexGridSizer(4, 2, 0, 0);
    flexGridSizer124->SetFlexibleDirection( wxBOTH );
    flexGridSizer124->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer124->AddGrowableCol(1);
    flexGridSizer124->AddGrowableRow(3);
    
    staticBoxSizer122->Add(flexGridSizer124, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextNome = new wxStaticText(m_panel270, wxID_ANY, _("Nome"), wxDefaultPosition, wxDLG_UNIT(m_panel270, wxSize(-1,-1)), 0);
    
    flexGridSizer124->Add(m_staticTextNome, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlNome = new wxTextCtrl(m_panel270, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel270, wxSize(-1,-1)), wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlNome->SetHint(wxT(""));
    #endif
    
    flexGridSizer124->Add(m_textCtrlNome, 0, wxALL, WXC_FROM_DIP(5));
    m_textCtrlNome->SetMinSize(wxSize(200,-1));
    
    m_staticTextCognome = new wxStaticText(m_panel270, wxID_ANY, _("Cognome"), wxDefaultPosition, wxDLG_UNIT(m_panel270, wxSize(-1,-1)), 0);
    
    flexGridSizer124->Add(m_staticTextCognome, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlCognome = new wxTextCtrl(m_panel270, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel270, wxSize(-1,-1)), wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlCognome->SetHint(wxT(""));
    #endif
    
    flexGridSizer124->Add(m_textCtrlCognome, 0, wxALL, WXC_FROM_DIP(5));
    m_textCtrlCognome->SetMinSize(wxSize(200,-1));
    
    m_staticTextNatoIl = new wxStaticText(m_panel270, wxID_ANY, _("Nato il"), wxDefaultPosition, wxDLG_UNIT(m_panel270, wxSize(-1,-1)), 0);
    
    flexGridSizer124->Add(m_staticTextNatoIl, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlNatoIl = new wxTextCtrl(m_panel270, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel270, wxSize(-1,-1)), wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlNatoIl->SetHint(wxT(""));
    #endif
    
    flexGridSizer124->Add(m_textCtrlNatoIl, 0, wxALL, WXC_FROM_DIP(5));
    m_textCtrlNatoIl->SetMinSize(wxSize(200,-1));
    
    m_staticTextNote = new wxStaticText(m_panel270, wxID_ANY, _("Note"), wxDefaultPosition, wxDLG_UNIT(m_panel270, wxSize(-1,-1)), 0);
    
    flexGridSizer124->Add(m_staticTextNote, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlNote = new wxTextCtrl(m_panel270, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel270, wxSize(-1,-1)), wxTE_MULTILINE);
    m_textCtrlNote->SetFocus();
    
    flexGridSizer124->Add(m_textCtrlNote, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    m_textCtrlNote->SetMinSize(wxSize(200,200));
    
    wxStaticBoxSizer* staticBoxSizer239 = new wxStaticBoxSizer( new wxStaticBox(m_panel270, wxID_ANY, _("Elenco degli esercizi svolti")), wxVERTICAL);
    
    flexGridSizer118->Add(staticBoxSizer239, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer243 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer243->SetFlexibleDirection( wxBOTH );
    flexGridSizer243->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer243->AddGrowableCol(0);
    flexGridSizer243->AddGrowableRow(0);
    
    staticBoxSizer239->Add(flexGridSizer243, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_listCtrlReports = new wxListCtrl(m_panel270, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel270, wxSize(-1,-1)), wxLC_SINGLE_SEL|wxLC_REPORT);
    
    flexGridSizer243->Add(m_listCtrlReports, 0, wxALL|wxEXPAND|wxALIGN_TOP, WXC_FROM_DIP(5));
    m_listCtrlReports->SetMinSize(wxSize(630,250));
    
    m_staticLine120 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer116->Add(m_staticLine120, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    SetName(wxT("FramePaziente"));
    SetSize(920,600);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(m_menuItemChiudi->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(FramePaziente::OnChiudiPaziente), NULL, this);
    this->Connect(m_menuItemNuovoEsercizio->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(FramePaziente::OnNuovoEsercizio), NULL, this);
    this->Connect(m_menuItemNuovoComePrecedente->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(FramePaziente::OnNuovoEsercizioComePrecedente), NULL, this);
    this->Connect(m_menuItemNuovoComeSelezione->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(FramePaziente::OnNuovoEsercizioComeSelezione), NULL, this);
    m_listCtrlReports->Connect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(FramePaziente::OnListCtrlReportOpenReport), NULL, this);
    m_listCtrlReports->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(FramePaziente::OnListCtrlReportItemSelected), NULL, this);
    
}

FramePaziente::~FramePaziente()
{
    this->Disconnect(m_menuItemChiudi->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(FramePaziente::OnChiudiPaziente), NULL, this);
    this->Disconnect(m_menuItemNuovoEsercizio->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(FramePaziente::OnNuovoEsercizio), NULL, this);
    this->Disconnect(m_menuItemNuovoComePrecedente->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(FramePaziente::OnNuovoEsercizioComePrecedente), NULL, this);
    this->Disconnect(m_menuItemNuovoComeSelezione->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(FramePaziente::OnNuovoEsercizioComeSelezione), NULL, this);
    m_listCtrlReports->Disconnect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(FramePaziente::OnListCtrlReportOpenReport), NULL, this);
    m_listCtrlReports->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(FramePaziente::OnListCtrlReportItemSelected), NULL, this);
    
}

DialogNuovoEsercizio::DialogNuovoEsercizio(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizerSotto = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizerSotto->SetFlexibleDirection( wxBOTH );
    flexGridSizerSotto->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizerSotto->AddGrowableCol(0);
    flexGridSizerSotto->AddGrowableRow(0);
    this->SetSizer(flexGridSizerSotto);
    
    wxFlexGridSizer* flexGridSizer82 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer82->SetFlexibleDirection( wxBOTH );
    flexGridSizer82->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer82->AddGrowableCol(2);
    flexGridSizer82->AddGrowableRow(0);
    
    flexGridSizerSotto->Add(flexGridSizer82, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizerGruppieFiltri = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizerGruppieFiltri->SetFlexibleDirection( wxBOTH );
    flexGridSizerGruppieFiltri->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizerGruppieFiltri->AddGrowableRow(0);
    
    flexGridSizer82->Add(flexGridSizerGruppieFiltri, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxStaticBoxSizer* staticBoxSizerTipologia = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, _("Tipologia allenamento")), wxVERTICAL);
    
    flexGridSizerGruppieFiltri->Add(staticBoxSizerTipologia, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer110 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer110->SetFlexibleDirection( wxBOTH );
    flexGridSizer110->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer110->AddGrowableCol(0);
    flexGridSizer110->AddGrowableRow(1);
    
    staticBoxSizerTipologia->Add(flexGridSizer110, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxArrayString m_choiceTipoSchedaArr;
    m_choiceTipoScheda = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_choiceTipoSchedaArr, 0);
    m_choiceTipoScheda->SetToolTip(_("Scegli la macro categoria"));
    
    flexGridSizer110->Add(m_choiceTipoScheda, 0, wxALL, WXC_FROM_DIP(5));
    m_choiceTipoScheda->SetMinSize(wxSize(250,-1));
    
    wxArrayString m_checkListBoxListeArr;
    m_checkListBoxListe = new wxCheckListBox(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_checkListBoxListeArr, wxLB_SORT|wxLB_SINGLE);
    
    flexGridSizer110->Add(m_checkListBoxListe, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    m_checkListBoxListe->SetMinSize(wxSize(-1,150));
    
    wxStaticBoxSizer* staticBoxSizerFiltri = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, _("Filtri")), wxVERTICAL);
    
    flexGridSizerGruppieFiltri->Add(staticBoxSizerFiltri, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizerFiltri = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizerFiltri->SetFlexibleDirection( wxBOTH );
    flexGridSizerFiltri->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizerFiltri->AddGrowableCol(1);
    
    staticBoxSizerFiltri->Add(flexGridSizerFiltri, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxArrayString m_choiceFiltro1Arr;
    m_choiceFiltro1Arr.Add(wxT(""));
    m_choiceFiltro1Arr.Add(wxT("Inizia per"));
    m_choiceFiltro1Arr.Add(wxT("Non inizia per"));
    m_choiceFiltro1Arr.Add(wxT("Contiene (AND)"));
    m_choiceFiltro1Arr.Add(wxT("Contiene (OR)"));
    m_choiceFiltro1Arr.Add(wxT("Non contiene"));
    m_choiceFiltro1 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_choiceFiltro1Arr, 0);
    m_choiceFiltro1->SetToolTip(_("Seleziona il tipo di filtro"));
    m_choiceFiltro1->SetSelection(0);
    
    flexGridSizerFiltri->Add(m_choiceFiltro1, 0, wxALL, WXC_FROM_DIP(5));
    m_choiceFiltro1->SetMinSize(wxSize(140,-1));
    
    m_textCtrlFiltro1 = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_CENTRE);
    m_textCtrlFiltro1->SetToolTip(_("Lettere o gruppi di lettere a cui applicare il filtro"));
    m_textCtrlFiltro1->Enable(false);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlFiltro1->SetHint(wxT(""));
    #endif
    
    flexGridSizerFiltri->Add(m_textCtrlFiltro1, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_choiceFiltro2Arr;
    m_choiceFiltro2Arr.Add(wxT(""));
    m_choiceFiltro2Arr.Add(wxT("Inizia per"));
    m_choiceFiltro2Arr.Add(wxT("Non inizia per"));
    m_choiceFiltro2Arr.Add(wxT("Contiene (AND)"));
    m_choiceFiltro2Arr.Add(wxT("Contiene (OR)"));
    m_choiceFiltro2Arr.Add(wxT("Non contiene"));
    m_choiceFiltro2 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_choiceFiltro2Arr, 0);
    m_choiceFiltro2->SetToolTip(_("Seleziona il tipo di filtro"));
    m_choiceFiltro2->SetSelection(0);
    
    flexGridSizerFiltri->Add(m_choiceFiltro2, 0, wxALL, WXC_FROM_DIP(5));
    m_choiceFiltro2->SetMinSize(wxSize(140,-1));
    
    m_textCtrlFiltro2 = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_CENTRE);
    m_textCtrlFiltro2->SetToolTip(_("Lettere o gruppi di lettere a cui applicare il filtro"));
    m_textCtrlFiltro2->Enable(false);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlFiltro2->SetHint(wxT(""));
    #endif
    
    flexGridSizerFiltri->Add(m_textCtrlFiltro2, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxArrayString m_choiceFiltro3Arr;
    m_choiceFiltro3Arr.Add(wxT(""));
    m_choiceFiltro3Arr.Add(wxT("Inizia per"));
    m_choiceFiltro3Arr.Add(wxT("Non inizia per"));
    m_choiceFiltro3Arr.Add(wxT("Contiene (AND)"));
    m_choiceFiltro3Arr.Add(wxT("Contiene (OR)"));
    m_choiceFiltro3Arr.Add(wxT("Non contiene"));
    m_choiceFiltro3 = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_choiceFiltro3Arr, 0);
    m_choiceFiltro3->SetToolTip(_("Seleziona il tipo di filtro"));
    m_choiceFiltro3->SetSelection(0);
    
    flexGridSizerFiltri->Add(m_choiceFiltro3, 0, wxALL, WXC_FROM_DIP(5));
    m_choiceFiltro3->SetMinSize(wxSize(140,-1));
    
    m_textCtrlFiltro3 = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_CENTRE);
    m_textCtrlFiltro3->SetToolTip(_("Lettere o gruppi di lettere a cui applicare il filtro"));
    m_textCtrlFiltro3->Enable(false);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlFiltro3->SetHint(wxT(""));
    #endif
    
    flexGridSizerFiltri->Add(m_textCtrlFiltro3, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerItems = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, _("Items")), wxVERTICAL);
    
    flexGridSizer82->Add(staticBoxSizerItems, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer114 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer114->SetFlexibleDirection( wxBOTH );
    flexGridSizer114->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer114->AddGrowableRow(0);
    
    staticBoxSizerItems->Add(flexGridSizer114, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_textTempFlt = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_READONLY|wxTE_MULTILINE|wxBORDER_NONE);
    m_textTempFlt->SetToolTip(_("Questi sono gli elementi da cui attingerà l'esercizio"));
    
    flexGridSizer114->Add(m_textTempFlt, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    m_textTempFlt->SetMinSize(wxSize(90,-1));
    
    wxFlexGridSizer* flexGridSizer144 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer144->SetFlexibleDirection( wxBOTH );
    flexGridSizer144->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer144->AddGrowableCol(0);
    flexGridSizer144->AddGrowableRow(0);
    
    flexGridSizer82->Add(flexGridSizer144, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxStaticBoxSizer* staticBoxSizerProiettore = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, _("Proiettore")), wxVERTICAL);
    
    flexGridSizer144->Add(staticBoxSizerProiettore, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizerProiettore = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizerProiettore->SetFlexibleDirection( wxBOTH );
    flexGridSizerProiettore->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizerProiettore->AddGrowableCol(0);
    flexGridSizerProiettore->AddGrowableRow(0);
    
    staticBoxSizerProiettore->Add(flexGridSizerProiettore, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_textCtrlAnteprima = new wxTextCtrl(this, wxID_ANY, wxT("item"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RICH|wxTE_NO_VSCROLL|wxTE_MULTILINE|wxTE_CENTRE|wxBORDER_SUNKEN);
    m_textCtrlAnteprima->SetBackgroundColour(wxColour(wxT("rgb(0,0,0)")));
    m_textCtrlAnteprima->SetForegroundColour(wxColour(wxT("rgb(255,255,255)")));
    wxFont m_textCtrlAnteprimaFont(18, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Tahoma"));
    m_textCtrlAnteprima->SetFont(m_textCtrlAnteprimaFont);
    m_textCtrlAnteprima->SetToolTip(_("Anteprima"));
    
    flexGridSizerProiettore->Add(m_textCtrlAnteprima, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    m_textCtrlAnteprima->SetMinSize(wxSize(-1,130));
    
    wxFlexGridSizer* flexGridSizer148 = new wxFlexGridSizer(3, 2, 0, 0);
    flexGridSizer148->SetFlexibleDirection( wxBOTH );
    flexGridSizer148->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizerProiettore->Add(flexGridSizer148, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText146 = new wxStaticText(this, wxID_ANY, _("Dimensione testo"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer148->Add(m_staticText146, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_spinCtrlDimensioni = new wxSpinCtrl(this, wxID_ANY, wxT("18"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_spinCtrlDimensioni->SetRange(10, 40);
    m_spinCtrlDimensioni->SetValue(18);
    
    flexGridSizer148->Add(m_spinCtrlDimensioni, 0, wxALL, WXC_FROM_DIP(5));
    m_spinCtrlDimensioni->SetMinSize(wxSize(60,-1));
    
    m_staticText1462 = new wxStaticText(this, wxID_ANY, _("Formattazione"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer148->Add(m_staticText1462, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxArrayString m_choiceMinuscoloArr;
    m_choiceMinuscoloArr.Add(wxT("Minuscolo"));
    m_choiceMinuscoloArr.Add(wxT("Maiuscolo"));
    m_choiceMinuscolo = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_choiceMinuscoloArr, 0);
    m_choiceMinuscolo->SetSelection(0);
    
    flexGridSizer148->Add(m_choiceMinuscolo, 0, wxALL, WXC_FROM_DIP(5));
    m_choiceMinuscolo->SetMinSize(wxSize(120,-1));
    
    m_staticText1463 = new wxStaticText(this, wxID_ANY, _("Colori"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer148->Add(m_staticText1463, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    m_staticText1463->SetMinSize(wxSize(100,-1));
    
    wxArrayString m_choiceColoriArr;
    m_choiceColoriArr.Add(wxT("Bianco su sfondo Nero"));
    m_choiceColoriArr.Add(wxT("Nero su sfondo Bianco"));
    m_choiceColori = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_choiceColoriArr, 0);
    m_choiceColori->SetSelection(0);
    
    flexGridSizer148->Add(m_choiceColori, 0, wxALL, WXC_FROM_DIP(5));
    m_choiceColori->SetMinSize(wxSize(210,-1));
    
    m_checkBoxSegnalePreavviso = new wxCheckBox(this, wxID_ANY, _("Segnale visivo di preavviso"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_checkBoxSegnalePreavviso->SetValue(true);
    
    flexGridSizerProiettore->Add(m_checkBoxSegnalePreavviso, 0, wxALL, WXC_FROM_DIP(5));
    
    m_checkBoxMascheramento = new wxCheckBox(this, wxID_ANY, _("Mascheramento"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_checkBoxMascheramento->SetValue(true);
    
    flexGridSizerProiettore->Add(m_checkBoxMascheramento, 0, wxALL, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerEsercizio = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, _("Esercizio")), wxVERTICAL);
    
    flexGridSizer144->Add(staticBoxSizerEsercizio, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizerEsercizio = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizerEsercizio->SetFlexibleDirection( wxBOTH );
    flexGridSizerEsercizio->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    staticBoxSizerEsercizio->Add(flexGridSizerEsercizio, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizerNItems = new wxFlexGridSizer(2, 3, 0, 0);
    flexGridSizerNItems->SetFlexibleDirection( wxBOTH );
    flexGridSizerNItems->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizerNItems->AddGrowableCol(2);
    
    flexGridSizerEsercizio->Add(flexGridSizerNItems, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticTextNumItems = new wxStaticText(this, wxID_ANY, _("Numero di Item"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizerNItems->Add(m_staticTextNumItems, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    m_staticTextNumItems->SetMinSize(wxSize(100,-1));
    
    m_spinCtrlNumItems = new wxSpinCtrl(this, wxID_ANY, wxT("20"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSP_ARROW_KEYS);
    m_spinCtrlNumItems->SetRange(5, 40);
    m_spinCtrlNumItems->SetValue(20);
    
    flexGridSizerNItems->Add(m_spinCtrlNumItems, 0, wxALL, WXC_FROM_DIP(5));
    m_spinCtrlNumItems->SetMinSize(wxSize(60,-1));
    
    m_staticTextSceltiTra = new wxStaticText(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizerNItems->Add(m_staticTextSceltiTra, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_staticText14628 = new wxStaticText(this, wxID_ANY, _("Esposizione"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizerNItems->Add(m_staticText14628, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    m_staticText14628->SetMinSize(wxSize(100,-1));
    
    m_textCtrlTempoEsposizione = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlTempoEsposizione->SetHint(wxT(""));
    #endif
    
    flexGridSizerNItems->Add(m_textCtrlTempoEsposizione, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    m_textCtrlTempoEsposizione->SetMinSize(wxSize(60,-1));
    
    wxArrayString m_choiceUMEsposizioneArr;
    m_choiceUMEsposizioneArr.Add(wxT("Millisecondi"));
    m_choiceUMEsposizioneArr.Add(wxT("Sillabe al secondo"));
    m_choiceUMEsposizione = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_choiceUMEsposizioneArr, 0);
    m_choiceUMEsposizione->SetSelection(1);
    
    flexGridSizerNItems->Add(m_choiceUMEsposizione, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer159 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer159->SetFlexibleDirection( wxBOTH );
    flexGridSizer159->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizerEsercizio->Add(flexGridSizer159, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticTextRisposta = new wxStaticText(this, wxID_ANY, _("Validazione item"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer159->Add(m_staticTextRisposta, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    m_staticTextRisposta->SetMinSize(wxSize(100,-1));
    
    wxArrayString m_choiceRispostaArr;
    m_choiceRispostaArr.Add(wxT("Mediante reinserimento"));
    m_choiceRispostaArr.Add(wxT("Con pulsanti Yes / No"));
    m_choiceRisposta = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_choiceRispostaArr, 0);
    m_choiceRisposta->SetSelection(0);
    
    flexGridSizer159->Add(m_choiceRisposta, 0, wxALL, WXC_FROM_DIP(5));
    m_choiceRisposta->SetMinSize(wxSize(210,-1));
    
    m_staticLine92 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizerSotto->Add(m_staticLine92, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer79 = new wxFlexGridSizer(1, 4, 0, 0);
    flexGridSizer79->SetFlexibleDirection( wxBOTH );
    flexGridSizer79->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer79->AddGrowableCol(0);
    flexGridSizer79->AddGrowableRow(0);
    
    flexGridSizerSotto->Add(flexGridSizer79, 1, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_staticTextService = new wxStaticText(this, wxID_ANY, _("Verificare le preimpostazioni"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_staticTextService->SetForegroundColour(wxColour(wxT("rgb(255,0,0)")));
    m_staticTextService->Hide();
    
    flexGridSizer79->Add(m_staticTextService, 1, wxALL|wxALIGN_CENTER_VERTICAL|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(5));
    
    m_buttonVisualizzaReport = new wxButton(this, wxID_ANY, _("Visualizza ultimo Report"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(120,-1)), 0);
    m_buttonVisualizzaReport->SetToolTip(_("Visualizza il report dell'ultimo esercizio svolto"));
    
    flexGridSizer79->Add(m_buttonVisualizzaReport, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonAnnullaEsercizio = new wxButton(this, wxID_ANY, _("Annulla"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_buttonAnnullaEsercizio->SetToolTip(_("Annulla l'esercizio"));
    
    flexGridSizer79->Add(m_buttonAnnullaEsercizio, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonAvvia = new wxButton(this, wxID_ANY, _("Avvia"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_buttonAvvia->SetToolTip(_("Avvia l'esercizio"));
    m_buttonAvvia->Enable(false);
    
    flexGridSizer79->Add(m_buttonAvvia, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("DialogNuovoEsercizio"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_choiceTipoScheda->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(DialogNuovoEsercizio::PopulateCheckListBoxListe), NULL, this);
    m_checkListBoxListe->Connect(wxEVT_COMMAND_LISTBOX_SELECTED, wxCommandEventHandler(DialogNuovoEsercizio::OncheckBoxListeSelected), NULL, this);
    m_checkListBoxListe->Connect(wxEVT_COMMAND_CHECKLISTBOX_TOGGLED, wxCommandEventHandler(DialogNuovoEsercizio::OnChecklistboxlisteToggled), NULL, this);
    m_choiceFiltro1->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(DialogNuovoEsercizio::OnchoiceFiltro1changed), NULL, this);
    m_textCtrlFiltro1->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(DialogNuovoEsercizio::OnTextCtrlFilter1Updated), NULL, this);
    m_choiceFiltro2->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(DialogNuovoEsercizio::OnchoiceFiltro2changed), NULL, this);
    m_textCtrlFiltro2->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(DialogNuovoEsercizio::OnTextCtrlFilter2Updated), NULL, this);
    m_choiceFiltro3->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(DialogNuovoEsercizio::OnchoiceFiltro3changed), NULL, this);
    m_textCtrlFiltro3->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(DialogNuovoEsercizio::OnTextCtrlFilter3Updated), NULL, this);
    m_spinCtrlDimensioni->Connect(wxEVT_COMMAND_SPINCTRL_UPDATED, wxSpinEventHandler(DialogNuovoEsercizio::OnFontDimensionChanged), NULL, this);
    m_choiceMinuscolo->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(DialogNuovoEsercizio::OnChoiceMinuscoloChanged), NULL, this);
    m_choiceColori->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(DialogNuovoEsercizio::OnChoiceColoriChanged), NULL, this);
    m_spinCtrlNumItems->Connect(wxEVT_COMMAND_SPINCTRL_UPDATED, wxSpinEventHandler(DialogNuovoEsercizio::OnNumItemChanged), NULL, this);
    m_textCtrlTempoEsposizione->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(DialogNuovoEsercizio::OnTempoEsposizioneUpdated), NULL, this);
    m_buttonVisualizzaReport->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(DialogNuovoEsercizio::OnVisualizzaReportClicked), NULL, this);
    m_buttonAnnullaEsercizio->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(DialogNuovoEsercizio::OnAnnullaEsercizio), NULL, this);
    m_buttonAvvia->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(DialogNuovoEsercizio::OnAvviaClicked), NULL, this);
    
}

DialogNuovoEsercizio::~DialogNuovoEsercizio()
{
    m_choiceTipoScheda->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(DialogNuovoEsercizio::PopulateCheckListBoxListe), NULL, this);
    m_checkListBoxListe->Disconnect(wxEVT_COMMAND_LISTBOX_SELECTED, wxCommandEventHandler(DialogNuovoEsercizio::OncheckBoxListeSelected), NULL, this);
    m_checkListBoxListe->Disconnect(wxEVT_COMMAND_CHECKLISTBOX_TOGGLED, wxCommandEventHandler(DialogNuovoEsercizio::OnChecklistboxlisteToggled), NULL, this);
    m_choiceFiltro1->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(DialogNuovoEsercizio::OnchoiceFiltro1changed), NULL, this);
    m_textCtrlFiltro1->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(DialogNuovoEsercizio::OnTextCtrlFilter1Updated), NULL, this);
    m_choiceFiltro2->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(DialogNuovoEsercizio::OnchoiceFiltro2changed), NULL, this);
    m_textCtrlFiltro2->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(DialogNuovoEsercizio::OnTextCtrlFilter2Updated), NULL, this);
    m_choiceFiltro3->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(DialogNuovoEsercizio::OnchoiceFiltro3changed), NULL, this);
    m_textCtrlFiltro3->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(DialogNuovoEsercizio::OnTextCtrlFilter3Updated), NULL, this);
    m_spinCtrlDimensioni->Disconnect(wxEVT_COMMAND_SPINCTRL_UPDATED, wxSpinEventHandler(DialogNuovoEsercizio::OnFontDimensionChanged), NULL, this);
    m_choiceMinuscolo->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(DialogNuovoEsercizio::OnChoiceMinuscoloChanged), NULL, this);
    m_choiceColori->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(DialogNuovoEsercizio::OnChoiceColoriChanged), NULL, this);
    m_spinCtrlNumItems->Disconnect(wxEVT_COMMAND_SPINCTRL_UPDATED, wxSpinEventHandler(DialogNuovoEsercizio::OnNumItemChanged), NULL, this);
    m_textCtrlTempoEsposizione->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(DialogNuovoEsercizio::OnTempoEsposizioneUpdated), NULL, this);
    m_buttonVisualizzaReport->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(DialogNuovoEsercizio::OnVisualizzaReportClicked), NULL, this);
    m_buttonAnnullaEsercizio->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(DialogNuovoEsercizio::OnAnnullaEsercizio), NULL, this);
    m_buttonAvvia->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(DialogNuovoEsercizio::OnAvviaClicked), NULL, this);
    
}

FrameReport::FrameReport(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer239 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer239->SetFlexibleDirection( wxBOTH );
    flexGridSizer239->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer239->AddGrowableCol(0);
    flexGridSizer239->AddGrowableRow(0);
    this->SetSizer(flexGridSizer239);
    
    m_panel277 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    flexGridSizer239->Add(m_panel277, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer275 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer275->SetFlexibleDirection( wxBOTH );
    flexGridSizer275->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer275->AddGrowableCol(0);
    flexGridSizer275->AddGrowableRow(0);
    m_panel277->SetSizer(flexGridSizer275);
    
    m_htmlWinReport = new wxHtmlWindow(m_panel277, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel277, wxSize(-1,-1)), wxHW_SCROLLBAR_AUTO|wxBORDER_SUNKEN);
    m_htmlWinReport->SetPage(wxT(""));
    
    flexGridSizer275->Add(m_htmlWinReport, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_htmlWinReport->SetMinSize(wxSize(450,550));
    
    m_staticLine243 = new wxStaticLine(m_panel277, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel277, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer275->Add(m_staticLine243, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer245 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer245->SetFlexibleDirection( wxBOTH );
    flexGridSizer245->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer245->AddGrowableCol(0);
    flexGridSizer245->AddGrowableRow(0);
    
    flexGridSizer275->Add(flexGridSizer245, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextService = new wxStaticText(m_panel277, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel277, wxSize(-1,-1)), 0);
    
    flexGridSizer245->Add(m_staticTextService, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_buttonClose = new wxButton(m_panel277, wxID_ANY, _("Chiudi"), wxDefaultPosition, wxDLG_UNIT(m_panel277, wxSize(-1,-1)), 0);
    m_buttonClose->SetFocus();
    
    flexGridSizer245->Add(m_buttonClose, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("FrameReport"));
    SetSize(600,700);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonClose->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(FrameReport::OnCloseClicked), NULL, this);
    
}

FrameReport::~FrameReport()
{
    m_buttonClose->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(FrameReport::OnCloseClicked), NULL, this);
    
}

FrameProiettore::FrameProiettore(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizerSotto = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizerSotto->SetFlexibleDirection( wxBOTH );
    flexGridSizerSotto->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizerSotto->AddGrowableCol(0);
    flexGridSizerSotto->AddGrowableRow(0);
    this->SetSizer(flexGridSizerSotto);
    
    m_panelProjector = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL|wxBORDER_NONE);
    m_panelProjector->SetBackgroundColour(wxColour(wxT("rgb(0,0,0)")));
    
    flexGridSizerSotto->Add(m_panelProjector, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizerBase = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizerBase->SetFlexibleDirection( wxBOTH );
    flexGridSizerBase->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizerBase->AddGrowableCol(0);
    flexGridSizerBase->AddGrowableRow(0);
    m_panelProjector->SetSizer(flexGridSizerBase);
    
    wxBoxSizer* boxSizer212 = new wxBoxSizer(wxVERTICAL);
    
    flexGridSizerBase->Add(boxSizer212, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizerSup = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizerSup->SetFlexibleDirection( wxBOTH );
    flexGridSizerSup->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizerSup->AddGrowableCol(0);
    flexGridSizerSup->AddGrowableRow(0);
    
    boxSizer212->Add(flexGridSizerSup, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticBitmapEmoticon = new wxStaticBitmap(m_panelProjector, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDLG_UNIT(m_panelProjector, wxSize(-1,-1)), 0 );
    
    flexGridSizerSup->Add(m_staticBitmapEmoticon, 0, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_BOTTOM|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(5));
    m_staticBitmapEmoticon->SetMinSize(wxSize(128,128));
    
    m_staticTextMessage = new wxStaticText(m_panelProjector, wxID_ANY, _("Quando sei pronto premi Avanti"), wxDefaultPosition, wxDLG_UNIT(m_panelProjector, wxSize(-1,-1)), 0);
    m_staticTextMessage->SetForegroundColour(wxColour(wxT("rgb(68,102,170)")));
    
    flexGridSizerSup->Add(m_staticTextMessage, 0, wxALL|wxALIGN_CENTER_HORIZONTAL|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(0));
    
    m_staticTextItem = new wxStaticText(m_panelProjector, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelProjector, wxSize(-1,-1)), 0);
    m_staticTextItem->SetBackgroundColour(wxColour(wxT("rgb(0,0,0)")));
    m_staticTextItem->SetForegroundColour(wxColour(wxT("rgb(255,255,255)")));
    wxFont m_staticTextItemFont(20, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Tahoma"));
    m_staticTextItem->SetFont(m_staticTextItemFont);
    
    boxSizer212->Add(m_staticTextItem, 0, wxALL|wxALIGN_CENTER|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizerInf = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizerInf->SetFlexibleDirection( wxBOTH );
    flexGridSizerInf->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizerInf->AddGrowableCol(0);
    flexGridSizerInf->AddGrowableRow(1);
    
    boxSizer212->Add(flexGridSizerInf, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panelItemCheck = new wxPanel(m_panelProjector, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelProjector, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    flexGridSizerInf->Add(m_panelItemCheck, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer233 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer233->SetFlexibleDirection( wxBOTH );
    flexGridSizer233->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer233->AddGrowableCol(0);
    flexGridSizer233->AddGrowableRow(0);
    m_panelItemCheck->SetSizer(flexGridSizer233);
    
    m_textCtrlItemCheck = new wxTextCtrl(m_panelItemCheck, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelItemCheck, wxSize(-1,-1)), wxTE_RICH|wxTE_PROCESS_ENTER|wxTE_MULTILINE|wxTE_CENTRE|wxBORDER_NONE);
    m_textCtrlItemCheck->SetBackgroundColour(wxColour(wxT("rgb(0,0,0)")));
    m_textCtrlItemCheck->SetForegroundColour(wxColour(wxT("rgb(255,255,255)")));
    wxFont m_textCtrlItemCheckFont(20, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Tahoma"));
    m_textCtrlItemCheck->SetFont(m_textCtrlItemCheckFont);
    
    flexGridSizer233->Add(m_textCtrlItemCheck, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxRESERVE_SPACE_EVEN_IF_HIDDEN, WXC_FROM_DIP(1));
    m_panelItemCheck->SetMinSize(wxSize(300,-1));
    
    flexGridSizerInf->Add(0, 0, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_panel279 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    flexGridSizerSotto->Add(m_panel279, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer181 = new wxFlexGridSizer(1, 7, 0, 0);
    flexGridSizer181->SetFlexibleDirection( wxBOTH );
    flexGridSizer181->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer181->AddGrowableCol(1);
    m_panel279->SetSizer(flexGridSizer181);
    
    m_gaugeAvanzamento = new wxGauge(m_panel279, wxID_ANY, 40, wxDefaultPosition, wxDLG_UNIT(m_panel279, wxSize(-1,-1)), wxGA_SMOOTH|wxGA_HORIZONTAL);
    m_gaugeAvanzamento->SetValue(0);
    
    flexGridSizer181->Add(m_gaugeAvanzamento, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    m_gaugeAvanzamento->SetMinSize(wxSize(200,-1));
    
    m_staticTextInfo = new wxStaticText(m_panel279, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel279, wxSize(-1,-1)), 0);
    
    flexGridSizer181->Add(m_staticTextInfo, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_staticTextHint = new wxStaticText(m_panel279, wxID_ANY, _("?"), wxDefaultPosition, wxDLG_UNIT(m_panel279, wxSize(-1,-1)), 0);
    
    flexGridSizer181->Add(m_staticTextHint, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_buttonNo = new wxButton(m_panel279, wxID_ANY, _("No"), wxDefaultPosition, wxDLG_UNIT(m_panel279, wxSize(50,-1)), 0);
    
    flexGridSizer181->Add(m_buttonNo, 0, wxALL, WXC_FROM_DIP(5));
    m_buttonNo->SetMinSize(wxSize(50,-1));
    
    m_buttonYes = new wxButton(m_panel279, wxID_ANY, _("Yes"), wxDefaultPosition, wxDLG_UNIT(m_panel279, wxSize(50,-1)), 0);
    
    flexGridSizer181->Add(m_buttonYes, 0, wxALL, WXC_FROM_DIP(5));
    m_buttonYes->SetMinSize(wxSize(50,-1));
    
    m_buttonAvanti = new wxButton(m_panel279, wxID_ANY, _("Avanti >>"), wxDefaultPosition, wxDLG_UNIT(m_panel279, wxSize(-1,-1)), 0);
    m_buttonAvanti->SetDefault();
    
    flexGridSizer181->Add(m_buttonAvanti, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonTermina = new wxButton(m_panel279, wxID_ANY, _("Termina"), wxDefaultPosition, wxDLG_UNIT(m_panel279, wxSize(-1,-1)), 0);
    
    flexGridSizer181->Add(m_buttonTermina, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    SetName(wxT("FrameProiettore"));
    SetSize(800,500);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_textCtrlItemCheck->Connect(wxEVT_COMMAND_TEXT_ENTER, wxCommandEventHandler(FrameProiettore::OnTextCtrlItemCheckTextEnter), NULL, this);
    m_buttonNo->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(FrameProiettore::OnNoClicked), NULL, this);
    m_buttonYes->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(FrameProiettore::OnYesClicked), NULL, this);
    m_buttonAvanti->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(FrameProiettore::OnAvantiClicked), NULL, this);
    m_buttonTermina->Connect(wxEVT_LEFT_UP, wxMouseEventHandler(FrameProiettore::OnButtonterminaLeftUp), NULL, this);
    
}

FrameProiettore::~FrameProiettore()
{
    m_textCtrlItemCheck->Disconnect(wxEVT_COMMAND_TEXT_ENTER, wxCommandEventHandler(FrameProiettore::OnTextCtrlItemCheckTextEnter), NULL, this);
    m_buttonNo->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(FrameProiettore::OnNoClicked), NULL, this);
    m_buttonYes->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(FrameProiettore::OnYesClicked), NULL, this);
    m_buttonAvanti->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(FrameProiettore::OnAvantiClicked), NULL, this);
    m_buttonTermina->Disconnect(wxEVT_LEFT_UP, wxMouseEventHandler(FrameProiettore::OnButtonterminaLeftUp), NULL, this);
    
}
